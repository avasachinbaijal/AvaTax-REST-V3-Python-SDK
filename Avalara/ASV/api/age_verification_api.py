"""
    Avalara Shipping Verification for Beverage Alcohol

    API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta.   # noqa: E501

    The version of the OpenAPI document: 2.1.0-beta
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from Avalara.ASV.api_client import ApiClient, Endpoint as _Endpoint
from Avalara.ASV.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from Avalara.ASV.model.age_verify_failure_code import AgeVerifyFailureCode
from Avalara.ASV.model.age_verify_request import AgeVerifyRequest
from Avalara.ASV.model.age_verify_result import AgeVerifyResult
from Avalara.ASV.exceptions import ApiTypeError, ApiValueError, ApiException

class AgeVerificationApi(object):

    def __init__(self, api_client=None):
        if api_client is None:
            return
        self.__set_configuration(api_client)
    
    def set_api_client(self,api_client):
        self.__set_configuration(api_client)
    
    def __verify_api_client(self,api_client):
        if api_client is None:
            raise ApiValueError("APIClient not defined")
    
    def __set_configuration(self, api_client):
        self.__verify_api_client(api_client)
        self.api_client = api_client
		
        self.verify_age_endpoint = _Endpoint(
            settings={
                'response_type': (AgeVerifyResult,),
                'auth': [
                    'BasicAuth',
                    'Bearer'
                ],
                'endpoint_path': '/api/v2/ageverification/verify',
                'operation_id': 'verify_age',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'age_verify_request',
                    'simulated_failure_code',
                ],
                'required': [
                    'age_verify_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'age_verify_request':
                        (AgeVerifyRequest,),
                    'simulated_failure_code':
                        (AgeVerifyFailureCode,),
                },
                'attribute_map': {
                    'simulated_failure_code': 'simulatedFailureCode',
                },
                'location_map': {
                    'age_verify_request': 'body',
                    'simulated_failure_code': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def verify_age(
        self,
        age_verify_request,
        **kwargs
    ):
        """Determines whether an individual meets or exceeds the minimum legal drinking age.  # noqa: E501

        The request must meet the following criteria in order to be evaluated: * *firstName*, *lastName*, and *address* are required fields. * One of the following sets of attributes are required for the *address*:   * *line1, city, region*   * *line1, postalCode*  Optionally, the transaction and its lines may use the following parameters: * A *DOB* (Date of Birth) field. The value should be ISO-8601 compliant (e.g. 2020-07-21). * Beyond the required *address* fields above, a *country* field is permitted   * The valid values for this attribute are [*US, USA*]  **Security Policies** This API depends on the active subscription *AgeVerification*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_age(age_verify_request, async_req=True)
        >>> result = thread.get()

        Args:
            age_verify_request (AgeVerifyRequest): Information about the individual whose age is being verified.

        Keyword Args:
            simulated_failure_code (AgeVerifyFailureCode): (Optional) The failure code included in the simulated response of the endpoint. Note that this endpoint is only available in Sandbox for testing purposes.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AgeVerifyResult
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['age_verify_request'] = \
            age_verify_request
        return self.verify_age_endpoint.call_with_http_info(**kwargs)

